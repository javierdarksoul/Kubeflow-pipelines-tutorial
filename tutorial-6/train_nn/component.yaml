name: Train
inputs:
- {name: source, type: Artifact}
- {name: dataset, type: Artifact}
outputs:
- {name: weights, type: Artifact}
- {name: metrics, type: Metrics}
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'torch' 'torchvision' 'kfp==1.8.11' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef train(source: Input[Artifact],dataset: Input[Artifact], weights:\
      \ Output[Artifact] ,metrics: Output[Metrics]):\n    import pickle\n    import\
      \ torch\n    import tarfile\n    tarfile.open(name=source.path, mode=\"r\").extractall('.')\n\
      \    from src.nn import my_nn\n    with open(dataset.path,'rb') as file:\n \
      \       dataloaders = pickle.load(file)\n    model= my_nn()\n    train_loader=dataloaders[\"\
      train_loader\"]\n    valid_loader=dataloaders[\"valid_loader\"]\n    den_valid\
      \ = valid_loader.__len__()*valid_loader.batch_size\n    criterion = torch.nn.CrossEntropyLoss()\n\
      \    global_loss = 1e10\n    optimizer = torch.optim.Adam(model.parameters(),1e-3)\n\
      \    for epoch in range(10):\n        print(epoch)\n        train_loss=0.0\n\
      \        for image,label in train_loader:\n            optimizer.zero_grad()\n\
      \            output=model(image.reshape(-1,28*28))\n            loss = criterion(output,label)\n\
      \            loss.backward()\n            optimizer.step()\n            train_loss+=\
      \ loss.item()\n\n        valid_loss=0.0\n        for image,label in valid_loader:\n\
      \            y_pred=model(image.reshape(-1,28*28))\n            loss = criterion(y_pred,label)\n\
      \            valid_loss+= loss.item()\n            if valid_loss<global_loss:\n\
      \                print(\"Se encontr\xF3 un mejor modelo en la epoca: %i\\nLoss\
      \ Actual: =%f\" % (epoch, valid_loss/den_valid))\n                metrics.log_metric('Loss',\
      \ valid_loss/den_valid)\n                global_loss = valid_loss\n        \
      \        torch.save(model.state_dict(), weights.path)\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train
